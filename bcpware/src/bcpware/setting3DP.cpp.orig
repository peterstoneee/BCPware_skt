#include "setting3DP.h"
#include "mainwindow.h"

Setting3DP::Setting3DP(MainWindow *_mw, RichParameterSet *currParm, QWidget *parent) :QDialog(parent), ui(new Ui::setting3DP_UI), loadtoWidgetParam(currParm)
{
	ui->setupUi(this);
	ui->listWidget->setCurrentRow(0);
	initWidgetParam();

	if (DSP_TEST_MODE)
	{					
	}
	else
	{
		QModelIndex index = ui->printerCB->model()->index(0, 0);
		QModelIndex index2 = ui->printerCB->model()->index(2, 0);		
		QVariant v(0);
		ui->printerCB->model()->setData(index, v, Qt::UserRole - 1);
		ui->printerCB->model()->setData(index2, v, Qt::UserRole - 1);


		QListWidgetItem *item = ui->listWidget->item(3);
		item->setHidden(true);
		
		//ui->stackedWidget->widget(3)->hide();
		//ui->stackedWidget->widget(3)->setHidden(true);
		ui->stackedWidget->removeWidget(ui->SliceSettingPage);
	}


	switchSetting = false;

	mw = _mw;
	connect(ui->importSamplePushButton, SIGNAL(clicked()), this, SLOT(importSampleFile()));
	connect(ui->buttonBox, SIGNAL(accepted()), this, SLOT(getaccept()));
	connect(ui->sendUsageCB, SIGNAL(clicked()), this, SLOT(sendUsage()));
	ui->sendUsageCB->setStyleSheet(WidgetStyleSheet::check_onoff_styleSheet());
<<<<<<< local
	
	ks = new QKeySequence(Qt::CTRL + Qt::Key_X, Qt::CTRL + Qt::Key_C);
	
}

void Setting3DP::keyPressEvent(QKeyEvent *e)
{
	if (e->matches(QKeySequence::Underline))
		switchSetting ^= 1;

	if (switchSetting)
	{
		QListWidgetItem *item = ui->listWidget->item(3);
		item->setHidden(false);
		ui->stackedWidget->addWidget(ui->SliceSettingPage);

	}
	else
	{
		QListWidgetItem *item = ui->listWidget->item(3);
		item->setHidden(true);
		ui->stackedWidget->removeWidget(ui->SliceSettingPage);
		

	}
	

=======

>>>>>>> other
}

void Setting3DP::initWidgetParam()
{
	ui->languageCB->setCurrentIndex(loadtoWidgetParam->getEnum("Palette_Language"));
	//ui->undoLimitSB->setValue(loadtoWidgetParam->getInt("UNDO_LIMIT"));
	ui->displayUnitCB->setCurrentIndex(loadtoWidgetParam->getEnum("DISPLAY_UNIT"));
	ui->printerCB->setCurrentIndex(loadtoWidgetParam->getEnum("TARGET_PRINTER"));

	ui->sliceHeightLE->setText(QString::number(loadtoWidgetParam->getFloat("SLIGHT_HEIGHT"), 'g', 4));

	ui->autoPackingGapLE->setText(QString::number(loadtoWidgetParam->getFloat("AUTO_PACKING_GAP"), 'g', 4));
	ui->sacrificeStripLE->setText(QString::number(loadtoWidgetParam->getFloat("SACRIFICE_WIDTH"), 'g', 4));
	ui->startPrintCB->setChecked(loadtoWidgetParam->getBool("SYNCHRONIZE_PRINTING"));
	ui->pageSizeCB->setCurrentIndex(loadtoWidgetParam->getEnum("PAGE_SIZE"));
	ui->addpatternCB->setChecked(loadtoWidgetParam->getBool("ADD_PATTERN"));
	ui->plusPrintLengthLE->setText(QString::number(loadtoWidgetParam->getFloat("PLUS_PRINT_LENGTH"), 'g', 4));
	ui->startPrintPageLE->setText(QString::number(loadtoWidgetParam->getInt("START_PRINT_PAGE")));

	ui->totalFacetCB->setChecked(loadtoWidgetParam->getBool("FAST_RENDERING"));
	ui->totalFacetsLE->setText(QString::number(loadtoWidgetParam->getInt("TOTAL_FACET")));
}
void Setting3DP::initSetting(RichParameterSet *settingParam)
{

	//language
	QStringList languageList = QStringList() << "English" << "Traditional_Chinese";
	settingParam->addParam(new RichEnum("Palette_Language", 0, languageList, tr("Language"), tr("")));
	//undo limit	
	settingParam->addParam(new RichInt("UNDO_LIMIT", 20, "", ""));
	//Unit
	QStringList unitList = QStringList() << "mm" << "inch";
	settingParam->addParam(new RichEnum("DISPLAY_UNIT", 0, unitList));
	//TargetPrinter
	QStringList targetPrinter = QStringList() << "Palette" << "Palette_1_5" /*<<"Palette_Jr"*/;
	settingParam->addParam(new RichEnum("TARGET_PRINTER", 1, targetPrinter));

	settingParam->addParam(new RichFloat("SLIGHT_HEIGHT", 0.1016));

	settingParam->addParam(new RichFloat("AUTO_PACKING_GAP", 2));

	settingParam->addParam(new RichFloat("SACRIFICE_WIDTH", 0.05));

	settingParam->addParam(new RichBool("SYNCHRONIZE_PRINTING", false, "", ""));

	settingParam->addParam(new RichBool("ADD_PATTERN", true, "", ""));

	QStringList pageSize = QStringList() << "Short_Page" << "Long_Page";
	settingParam->addParam(new RichEnum("PAGE_SIZE", 1, pageSize));

	settingParam->addParam(new RichFloat("PLUS_PRINT_LENGTH", DSP_plusPrintLength));

	settingParam->addParam(new RichInt("START_PRINT_PAGE", 0));

	//Fast rendering
	settingParam->addParam(new RichBool("FAST_RENDERING", false, "", ""));

	settingParam->addParam(new RichInt("TOTAL_FACET", 0));


}

void Setting3DP::getaccept()
{
	/*QStringList languageList = QStringList() << "English" << "Traditional Chinese";
	QStringList unitList = QStringList() << "mm" << "inch";
	QStringList targetPrinter = QStringList() << "Picasso_1_0" << "Picasso_Jr";

	tmpParSet.addParam(new RichEnum("Picasso_Language", ui->languageCB->currentIndex() , languageList, tr("Language"), tr("")));
	tmpParSet.addParam(new RichEnum("DisplayUnit", ui->displayUnitCB->currentIndex() , unitList, tr("unitList"), tr("")));
	tmpParSet.addParam(new RichEnum("TargetPrinter", ui->printerCB->currentIndex() , targetPrinter, tr("TargetPrinter"), tr("")));
	ui->languageCB->currentIndex();*/

	//getValue from widget and save to register
	foreach(RichParameter *curpar, loadtoWidgetParam->paramList)
	{
		if (curpar->name == QString("Palette_Language"))
		{
			curpar->val->set(EnumValue(ui->languageCB->currentIndex()));
			acceptOne(curpar);
		}
		//else if (curpar->name == QString("UNDO_LIMIT")) { curpar->val->set(IntValue(ui->undoLimitSB->value())); acceptOne(curpar); }
		else if (curpar->name == QString("DISPLAY_UNIT")) { curpar->val->set(EnumValue(ui->displayUnitCB->currentIndex())); acceptOne(curpar); }
		else if (curpar->name == QString("TARGET_PRINTER")) { curpar->val->set(EnumValue(ui->printerCB->currentIndex())); acceptOne(curpar); }
		else if (curpar->name == QString("SLIGHT_HEIGHT")) { curpar->val->set(FloatValue(ui->sliceHeightLE->text().toFloat())); acceptOne(curpar); }
		else if (curpar->name == QString("AUTO_PACKING_GAP")) { curpar->val->set(FloatValue(ui->autoPackingGapLE->text().toFloat())); acceptOne(curpar); }
		else if (curpar->name == QString("SACRIFICE_WIDTH")) { curpar->val->set(FloatValue(ui->sacrificeStripLE->text().toFloat())); acceptOne(curpar); }
		else if (curpar->name == QString("SYNCHRONIZE_PRINTING")) { curpar->val->set(BoolValue(ui->startPrintCB->isChecked())); acceptOne(curpar); }
		else if (curpar->name == QString("PAGE_SIZE")) { curpar->val->set(EnumValue(ui->pageSizeCB->currentIndex())); acceptOne(curpar); }
		else if (curpar->name == QString("ADD_PATTERN")) { curpar->val->set(BoolValue(ui->addpatternCB->isChecked())); acceptOne(curpar); }
		else if (curpar->name == QString("PLUS_PRINT_LENGTH")) { curpar->val->set(FloatValue(ui->plusPrintLengthLE->text().toFloat())); acceptOne(curpar); }
		else if (curpar->name == QString("START_PRINT_PAGE")) { curpar->val->set(IntValue(ui->startPrintPageLE->text().toInt())); acceptOne(curpar); }

		else if (curpar->name == QString("FAST_RENDERING")) { curpar->val->set(BoolValue(ui->totalFacetCB->isChecked())); acceptOne(curpar); }
		else if (curpar->name == QString("TOTAL_FACET")) { curpar->val->set(IntValue(ui->totalFacetsLE->text().toInt())); acceptOne(curpar); }
	}
	accept();

}
void Setting3DP::acceptOne(RichParameter *inpar)
{
	QDomDocument doc("PaletteSetting");
	RichParameterXMLVisitor v(doc);
	inpar->accept(v);
	doc.appendChild(v.parElem);
	QString docstring = doc.toString();
	qDebug("Writing into Settings param with name %s and content ****%s****", qPrintable(inpar->name), qPrintable(docstring));
	QSettings setting;
	setting.setValue(inpar->name, QVariant(docstring));

}

void Setting3DP::importSampleFile()
{
	QString fileName = QCoreApplication::applicationDirPath() + "/Cube.stl";
	mw->importMeshWithLayerManagement(fileName);
	accept();
}

void Setting3DP::sendUsage()
{

}

Setting3DP::~Setting3DP()
{
}

